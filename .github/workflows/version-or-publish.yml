name: Version or Publish

on:
  push:
    branches:
      - main

permissions:
  contents: write # for merging the PR and creating the release
  pull-requests: write # for creating the version PR

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  package-infos:
    name: Get Package Infos
    runs-on: ubuntu-latest
    outputs:
      fullName: ${{ steps.package-infos.outputs.fullName }}
      vendorName: ${{ steps.package-infos.outputs.vendorName }}
      packageName: ${{ steps.package-infos.outputs.packageName }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read and Write Package Infos to Output
        id: package-infos
        run: |
          NAME=$(jq -r '.name' composer.json)
          echo "fullName=${NAME}" >> $GITHUB_OUTPUT
          echo "vendorName=${NAME%%/*}" >> $GITHUB_OUTPUT
          echo "packageName=${NAME#*/}" >> $GITHUB_OUTPUT
          cat "$GITHUB_OUTPUT"

  release:
    needs: package-infos
    if: ${{ github.repository == needs.package-infos.outputs.fullName }}

    name: Create Version PR or Publish
    runs-on: ubuntu-latest

    strategy:
      fail-fast: true

    steps:
      - name: Configure Git
        run: |
          git config --global user.email "bot@rassohilber.com"
          git config --global user.name "Rasso Hilber's Bot"

      - name: Check out repository
        uses: actions/checkout@v4

      - name: Setup PHP and Composer
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          tools: composer

      # Setup PNPM before node.js, so that we use the cache in the next action
      - name: Setup PNPM
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm

      - name: Install Asset Dependencies
        run: pnpm install --frozen-lockfile

      - name: Build and bundle assets
        run: |
          pnpm run build
          zip -rq assets.zip assets

      - name: Checkout Distribution Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.package-infos.outputs.fullName }}-dist
          ref: empty
          path: dist
          # secrets.GITHUB_TOKEN is not enough to push to the dist repo (needed later)
          token: ${{ secrets.HIRASSO_ACTIONS_TOKEN }}

      # Run this before changesets, to make sure releases actually work
      - name: Prepare Release
        run: config/scripts/prepareRelease.js

      # Run changesets action either if there are unreleased changesets (= a PR must be created)
      # or if the commit message matches the release PR (= new versions must be published to NPM)
      - name: Create changesets PR or Publish
        id: cs
        uses: changesets/action@v1
        with:
          title: "[CI] Release"
          commit: "[CI] Release"
          version: pnpm run version
          publish: pnpm changeset tag
        env:
          # doesn't work with GITHUB_TOKEN for some reason
          GITHUB_TOKEN: ${{ secrets.HIRASSO_ACTIONS_TOKEN }}

      - name: "Get Latest Tag"
        id: latest-tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"

      - name: Add artifacts to the latest release
        uses: ncipollo/release-action@v1
        if: steps.cs.outputs.published == 'true'
        with:
          tag: ${{ steps.latest-tag.outputs.tag }}
          allowUpdates: true
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          omitPrereleaseDuringUpdate: true
          artifacts: "${{ needs.package-infos.outputs.packageName }}.zip,assets.zip"

      - name: Push release to dist repo
        if: steps.cs.outputs.published == 'true'
        run: |
          config/scripts/pushReleaseToDist.js
